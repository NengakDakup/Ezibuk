{"version":3,"sources":["components/Header/index.js","screens/Home/index.js","actions/index.js","actions/actionTypes.js","screens/Login/index.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","data","userDetails","signedIn","history","push","_this2","components_Header","type","placeholder","onChange","e","setState","target","value","onClick","changeName","connect","dispatch","payload","Login","App","react_router_dom","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","StrictMode","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4a87fb1.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<p>Home</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {changeName} from '../../actions'\r\n\r\n// Components\r\nimport Header from '../../components/Header'\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: null\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        const {signedIn} = this.props.data.userDetails;\r\n        if(!signedIn){\r\n            this.props.history.push('/login');\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"app\">\r\n                <Header />\r\n                Home Page\r\n                <p>{this.props.data.userDetails.name}</p>\r\n                <input type=\"text\" placeholder=\"Enter Your Name\" onChange={(e) => this.setState({name: e.target.value})}/>\r\n                <button onClick={() => this.props.changeName(this.state.name)}>Change Name</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//fetch what you want from the store\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeName: (payload) => { dispatch(changeName(payload)) },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import * as types from './actionTypes';\r\n\r\nexport const changeName = (payload) => {\r\n    return {\r\n        type: types.CHANGE_NAME,\r\n        payload: payload\r\n    }\r\n}","export const CHANGE_NAME = 'CHANGE_NAME'; ","import React, {Component} from 'react'\r\n\r\nclass Login extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"login-top\">\r\n                \t<p className=\"title white\">Login</p>\r\n                </div>\r\n                <div className=\"login-bottom\">\r\n                \t<p className=\"font-sm light\">Sign in or Sign up to continue</p>\r\n                \t<form>\r\n                \t\t<div className=\"form-group\">\r\n                \t\t\t<i>I</i>\r\n                \t\t\t<input className=\"animated\" type=\"text\" placeholder=\"Email Address\" />\r\n                \t\t</div>\r\n                \t</form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport './assets/stylesheets/App.css';\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\nimport Home from './screens/Home';\nimport Login from './screens/Login';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    userDetails: {\r\n        signedIn: false,\r\n        name: 'Nengak Dakup'\r\n    }\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOG_IN':\r\n            return {\r\n                ...state,\r\n                userDetails: {\r\n                    ...action.payload\r\n                }\r\n            };\r\n        case 'CHANGE_NAME':\r\n            return {\r\n                ...state,\r\n                userDetails: {\r\n                    ...state.userDetails,\r\n                    name: action.payload\r\n                }\r\n            }\r\n    \r\n        default:\r\n            return {...state};\r\n    }\r\n};\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}